# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:32:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AddAddressGroupItemsRequest(BaseModel):
    items: Optional[List[str]] = Field(
        None, description='Required. List of items to add.'
    )
    requestId: Optional[str] = Field(
        None,
        description='Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'


class AddressGroup(BaseModel):
    capacity: Optional[int] = Field(
        None, description='Required. Capacity of the Address Group'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    items: Optional[List[str]] = Field(None, description='Optional. List of items.')
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the AddressGroup resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the AddressGroup resource. It matches pattern `projects/*/locations/{location}/addressGroups/`.',
    )
    selfLink: Optional[str] = Field(
        None,
        description='Output only. Server-defined fully-qualified URL for this resource.',
    )
    type: Optional[Type] = Field(
        None,
        description='Required. The type of the Address Group. Possible values are "IPv4" or "IPV6".',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class Action(Enum):
    ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED'
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class CancelOperationRequest(BaseModel):
    pass


class CertificateProviderInstance(BaseModel):
    pluginInstance: Optional[str] = Field(
        None,
        description='Required. Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.',
    )


class CloneAddressGroupItemsRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description='Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).',
    )
    sourceAddressGroup: Optional[str] = Field(
        None, description='Required. Source address group to clone items from.'
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GatewaySecurityPolicy(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy} gateway_security_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).',
    )
    tlsInspectionPolicy: Optional[str] = Field(
        None,
        description='Optional. Name of a TLS Inspection Policy resource that defines how TLS inspection will be performed for any rule(s) which enables it.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class BasicProfile(Enum):
    BASIC_PROFILE_UNSPECIFIED = 'BASIC_PROFILE_UNSPECIFIED'
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class GatewaySecurityPolicyRule(BaseModel):
    applicationMatcher: Optional[str] = Field(
        None,
        description='Optional. CEL expression for matching on L7/application level criteria.',
    )
    basicProfile: Optional[BasicProfile] = Field(
        None,
        description='Required. Profile which tells what the primitive action should be.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the rule was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    enabled: Optional[bool] = Field(
        None, description='Required. Whether the rule is enforced.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).',
    )
    priority: Optional[int] = Field(
        None,
        description='Required. Priority of the rule. Lower number corresponds to higher precedence.',
    )
    sessionMatcher: Optional[str] = Field(
        None, description='Required. CEL expression for matching on session criteria.'
    )
    tlsInspectionEnabled: Optional[bool] = Field(
        None,
        description='Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the rule was updated.'
    )


class GoogleCloudNetworksecurityV1beta1GrpcEndpoint(BaseModel):
    targetUri: Optional[str] = Field(
        None,
        description='Required. The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class HttpHeaderMatch(BaseModel):
    headerName: Optional[str] = Field(
        None,
        description='Required. The name of the HTTP header to match. For matching against the HTTP request\'s authority, use a headerMatch with the header name ":authority". For matching a request\'s method, use the headerName ":method".',
    )
    regexMatch: Optional[str] = Field(
        None,
        description="Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.",
    )


class ListAddressGroupReferencesResponseAddressGroupReference(BaseModel):
    firewallPolicy: Optional[str] = Field(
        None, description='FirewallPolicy that is using the Address Group.'
    )
    rulePriority: Optional[int] = Field(
        None,
        description='Rule priority of the FirewallPolicy that is using the Address Group.',
    )


class ListAddressGroupsResponse(BaseModel):
    addressGroups: Optional[List[AddressGroup]] = Field(
        None, description='List of AddressGroups resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListGatewaySecurityPoliciesResponse(BaseModel):
    gatewaySecurityPolicies: Optional[List[GatewaySecurityPolicy]] = Field(
        None, description='List of GatewaySecurityPolicies resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description="If there might be more results than those appearing in this response, then 'next_page_token' is included. To get the next set of results, call this method again using the value of 'next_page_token' as 'page_token'.",
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListGatewaySecurityPolicyRulesResponse(BaseModel):
    gatewaySecurityPolicyRules: Optional[List[GatewaySecurityPolicyRule]] = Field(
        None, description='List of GatewaySecurityPolicyRule resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description="If there might be more results than those appearing in this response, then 'next_page_token' is included. To get the next set of results, call this method again using the value of 'next_page_token' as 'page_token'.",
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class ClientValidationMode(Enum):
    CLIENT_VALIDATION_MODE_UNSPECIFIED = 'CLIENT_VALIDATION_MODE_UNSPECIFIED'
    ALLOW_INVALID_OR_MISSING_CLIENT_CERT = 'ALLOW_INVALID_OR_MISSING_CLIENT_CERT'
    REJECT_INVALID = 'REJECT_INVALID'


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class RemoveAddressGroupItemsRequest(BaseModel):
    items: Optional[List[str]] = Field(
        None, description='Required. List of items to remove.'
    )
    requestId: Optional[str] = Field(
        None,
        description='Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).',
    )


class Source(BaseModel):
    ipBlocks: Optional[List[str]] = Field(
        None,
        description='Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.',
    )
    principals: Optional[List[str]] = Field(
        None,
        description='Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TlsInspectionPolicy(BaseModel):
    caPool: Optional[str] = Field(
        None,
        description='Required. A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class UrlList(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the security policy was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the resource provided by the user. Name is of the form projects/{project}/locations/{location}/urlLists/{url_list} url_list should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the security policy was updated.'
    )
    values: Optional[List[str]] = Field(None, description='Required. FQDNs and URLs.')


class ValidationCA(BaseModel):
    certificateProviderInstance: Optional[CertificateProviderInstance] = Field(
        None,
        description='The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.',
    )
    grpcEndpoint: Optional[GoogleCloudNetworksecurityV1beta1GrpcEndpoint] = Field(
        None,
        description='gRPC specific configuration to access the gRPC server to obtain the CA certificate.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Destination(BaseModel):
    hosts: Optional[List[str]] = Field(
        None,
        description='Required. List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".',
    )
    httpHeaderMatch: Optional[HttpHeaderMatch] = Field(
        None,
        description='Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.',
    )
    methods: Optional[List[str]] = Field(
        None,
        description='Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.',
    )
    ports: Optional[List[int]] = Field(
        None,
        description='Required. List of destination ports to match. At least one port should match.',
    )


class GoogleCloudNetworksecurityV1beta1CertificateProvider(BaseModel):
    certificateProviderInstance: Optional[CertificateProviderInstance] = Field(
        None,
        description='The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.',
    )
    grpcEndpoint: Optional[GoogleCloudNetworksecurityV1beta1GrpcEndpoint] = Field(
        None,
        description='gRPC specific configuration to access the gRPC server to obtain the cert and private key.',
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class ListAddressGroupReferencesResponse(BaseModel):
    addressGroupReferences: Optional[
        List[ListAddressGroupReferencesResponseAddressGroupReference]
    ] = Field(
        None,
        description='A list of references that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListTlsInspectionPoliciesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description="If there might be more results than those appearing in this response, then 'next_page_token' is included. To get the next set of results, call this method again using the value of 'next_page_token' as 'page_token'.",
    )
    tlsInspectionPolicies: Optional[List[TlsInspectionPolicy]] = Field(
        None, description='List of TlsInspectionPolicies resources.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListUrlListsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
    urlLists: Optional[List[UrlList]] = Field(
        None, description='List of UrlList resources.'
    )


class MTLSPolicy(BaseModel):
    clientValidationCa: Optional[List[ValidationCA]] = Field(
        None,
        description='Required if the policy is to be used with Traffic Director. For External HTTPS LB it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.',
    )
    clientValidationMode: Optional[ClientValidationMode] = Field(
        None,
        description='Specifies whether client connections proceed when a client presents an invalid certificate or no certificate. Required if the policy is to be used with the External HTTPS LB. For Traffic Director it must be empty.',
    )
    clientValidationTrustConfig: Optional[str] = Field(
        None,
        description='Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with External HTTPS LB.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Rule(BaseModel):
    destinations: Optional[List[Destination]] = Field(
        None,
        description="Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.",
    )
    sources: Optional[List[Source]] = Field(
        None,
        description="Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.",
    )


class ServerTlsPolicy(BaseModel):
    allowOpen: Optional[bool] = Field(
        None,
        description='Can be enabled only for Traffic Director policies, must be false for External HTTPS LB policies. Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility. Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Free-text description of the resource.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of label tags associated with the resource.'
    )
    mtlsPolicy: Optional[MTLSPolicy] = Field(
        None,
        description='Required if policy is to be used with the External HTTPS LB, for Traffic Director allowed to be empty. Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`',
    )
    serverCertificate: Optional[
        GoogleCloudNetworksecurityV1beta1CertificateProvider
    ] = Field(
        None,
        description='Optional if policy is to be used with Traffic Director, for External HTTPS LB must be empty. Defines a mechanism to provision server identity (public and private keys). Cannot be combined with `allow_open` as a permissive mode that allows both plain text and TLS is not supported.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class AuthorizationPolicy(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the AuthorizationPolicy resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.',
    )
    rules: Optional[List[Rule]] = Field(
        None,
        description="Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.",
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class ClientTlsPolicy(BaseModel):
    clientCertificate: Optional[
        GoogleCloudNetworksecurityV1beta1CertificateProvider
    ] = Field(
        None,
        description='Optional. Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Free-text description of the resource.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. Set of label tags associated with the resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the ClientTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/clientTlsPolicies/{client_tls_policy}`',
    )
    serverValidationCa: Optional[List[ValidationCA]] = Field(
        None,
        description='Optional. Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.',
    )
    sni: Optional[str] = Field(
        None,
        description='Optional. Server Name Indication string to present to the server during TLS handshake. E.g: "secure.example.com".',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class ListAuthorizationPoliciesResponse(BaseModel):
    authorizationPolicies: Optional[List[AuthorizationPolicy]] = Field(
        None, description='List of AuthorizationPolicies resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListClientTlsPoliciesResponse(BaseModel):
    clientTlsPolicies: Optional[List[ClientTlsPolicy]] = Field(
        None, description='List of ClientTlsPolicy resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListServerTlsPoliciesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    serverTlsPolicies: Optional[List[ServerTlsPolicy]] = Field(
        None, description='List of ServerTlsPolicy resources.'
    )
